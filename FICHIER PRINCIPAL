// Remplacer le chargement conditionnel par
require('dotenv').config({
  path: process.env.NODE_ENV === 'test' ? '.env.test' : '.env'
});
const { initBot } = require('./core/trading-engine');
const { startMonitoring } = require('./monitoring/prometheus-exporter');
const { scheduleJobs } = require('./utils/scheduler');
const { initDatabase } = require('./core/database');

// V√©rification des variables d'environnement
const requiredEnvVars = ['SOLANA_RPC_URL', 'WALLET_PRIVATE_KEY', 'MONGO_URI'];
requiredEnvVars.forEach(varName => {
  if (!process.env[varName]) {
    console.error(`[‚ùå] Variable d'environnement manquante : ${varName}`);
    process.exit(1);
  }
});

// Validation du format de la cl√© priv√©e
if (!process.env.WALLET_PRIVATE_KEY.match(/^[0-9a-fA-F]{64}$/)) {
  console.error('[‚ùå] Format de cl√© priv√©e invalide');
  process.exit(1);
}

// V√©rification de l'environnement de production
if (process.env.NODE_ENV === 'production' && !process.env.WALLET_PRIVATE_KEY.startsWith('encrypted:')) {
  console.error('[üîí] Cl√© priv√©e non chiffr√©e en production!');
  process.exit(1);
}

async function main() {
  // 1. Initialisation
  await initDatabase();
  await startMonitoring(); // Pour Grafana

  // 2. Lancer le bot de trading
  const bot = await initBot({
    rpcUrl: process.env.SOLANA_RPC_URL,
    walletKey: process.env.WALLET_PRIVATE_KEY
  });

  // 3. Planifier les t√¢ches p√©riodiques
  scheduleJobs({
    backtesting: '0 0 * * 0', // Tous les dimanches
    budgetReset: '0 0 * * *',  // Tous les jours √† minuit
    reporting: '0 9 * * *'     // Tous les jours √† 9h
  });

  console.log('[üöÄ] Bot HFT Solana op√©rationnel');
}

main().catch(console.error);